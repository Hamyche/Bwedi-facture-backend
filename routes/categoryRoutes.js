const express = require('express');
const router = express.Router();
const { body, param } = require('express-validator');

const categoryController = require('../controllers/categoryController');
const authorizeOwner = require('../middlewares/authorizeOwner');
const { validate } = require('../middlewares/validationMiddleware');
const { verifyToken } = require('../middlewares/authMiddleware'); // âœ… sÃ©curitÃ© JWT
const Category = require('../models/category'); // âœ… nÃ©cessaire pour authorizeOwner

// ğŸ”¹ CrÃ©er une catÃ©gorie (auth + validation)
router.post(
    '/',
    verifyToken,
    [body('nom').notEmpty().withMessage('Le nom est obligatoire')],
    validate,
    categoryController.createCategory
);

// ğŸ”¹ RÃ©cupÃ©rer toutes les catÃ©gories
router.get('/', verifyToken, categoryController.getAllCategories);

// ğŸ”¹ RÃ©cupÃ©rer une catÃ©gorie par ID
router.get(
    '/:id',
    verifyToken,
    [param('id').isInt().withMessage('ID invalide')],
    validate,
    categoryController.getCategoryById
);

// ğŸ”¹ Mettre Ã  jour une catÃ©gorie (propriÃ©taire seulement)
router.put(
    '/:id',
    verifyToken,
    authorizeOwner(Category, 'user_id'), // âœ… vÃ©rification propriÃ©taire
    [
        param('id').isInt().withMessage('ID invalide'),
        body('nom').optional().notEmpty().withMessage('Nom invalide')
    ],
    validate,
    categoryController.updateCategory
);

// ğŸ”¹ Supprimer une catÃ©gorie (propriÃ©taire seulement)
router.delete(
    '/:id',
    verifyToken,
    authorizeOwner(Category, 'user_id'), // âœ… vÃ©rification propriÃ©taire
    [param('id').isInt().withMessage('ID invalide')],
    validate,
    categoryController.deleteCategory
);

module.exports = router;
